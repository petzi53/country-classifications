# M49 Classification {#sec-m49}

```{r}
#| label: setup
#| results: hold
#| include: false

base::source(file = "R/helper.R")
```

## Objectives {#sec-m49-objectives}

:::::: {#obj-un-objectives}
::::: my-objectives
::: my-objectives-header
Chapter section list
:::

::: my-objectives-container
1. Locate the file for the UN M49 geoscheme classification data, get it and save it as raw data (@sec-download-m49).
2. Inspect the data thoroughly (@sec-inspect-m49-raw).
3. Clean the data (first step) (@sec-clean-data-1).
4. Display the grouping results (@sec-display-result-1).
5. Clean the intermediate region to get the official results (@sec-clean-data-2).
6. Display the new intermediate region group (@sec-display-result-2).
:::
:::::
::::::

## Download M49 Data {#sec-download-m49}

An important --- maybe the most authoritative --- classification system
is developed and maintained by the United Nations. It is expressively
developed for statistical purposes by the United Nations Statistics
Division `r glossary("UNSD")` using the `r glossary("M49")` methodology.

The result is called [Standard country or area codes for statistical use
(M49)](https://unstats.un.org/unsd/methodology/m49/) and can be
downloaded manually in different languages and formats (Copy into the
clipboard, Excel or CSV) from the [United Nations Methodology Overview
page](https://unstats.un.org/unsd/methodology/m49/overview/).

::::::: my-resource
:::: my-resource-header
::: {#lem-unsd.m49}
: United Nations Statistics Division M49 Classification
:::
::::

:::: my-resource-container
-   [Manual
    download](https://unstats.un.org/unsd/methodology/m49/overview/):
    The standard country or area codes for statistical use (M49) is
    available in different languages (English, Chinese, Russian, French,
    Spanish, Arabic) by clicking one of the buttons "Copy", "Excel" or
    "CSV". On this page is no URL for an programmable download with an R
    script available, because Javascript triggers the buttons mentioned
    above.
-   [Automatic download by OMNIKA
    store](https://github.com/omnika-datastore/unsd-m49-standard-area-codes):
    I found with [OMNIKA
    DataStore](https://omnika.org/datastore)[^01-united-nations-1] an
    external source to download the classification file via R
    script[^01-united-nations-2].

The `r glossary("OMNIKA")` URLs for download are:

-   **EXCEL**:
    [2022-09-24\_\_Excel_UNSD_M49.xlsx](https://github.com/omnika-datastore/unsd-m49-standard-area-codes/raw/refs/heads/main/2022-09-24__Excel_UNSD_M49.xlsx)
-   **CSV**:
    [2022-09-24\_\_CSV_UNSD_M49.csv](https://github.com/omnika-datastore/unsd-m49-standard-area-codes/raw/refs/heads/main/2022-09-24__CSV_UNSD_M49.csv)

::::
:::::::

[^01-united-nations-1]: OMNIKA DataStore is an open-access data science
    resource for researchers, authors, and technologists. It is 501c3
    nonprofit organization whose mission is to digitize, organize, and
    make important (free) contents available for the general public. The
    service provides raw data from trusted sources, data visualizations,
    data analysis tools, and other digital resources.

[^01-united-nations-2]: A check with `base::all.equal()` turned out that
    the files from the two different sources (UNSD and OMNIKA) are
    identical.

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-download-unsd-classification}
: Download the United Nations M49 Classification
::::::
:::
::::{.my-r-code-container}

<center>**Run this code chunk manually if the file still needs to be downloaded.**</center>

```{r}
#| label: m49-raw
#| code-fold: show
#| eval: false

## create folders ###########
pb_create_folder(base::paste0(here::here(), "/data/"))
pb_create_folder(base::paste0(here::here(), "/data/unsd"))

## download m49 file ############
url <- "https://github.com/omnika-datastore/unsd-m49-standard-area-codes/raw/refs/heads/main/2022-09-24__CSV_UNSD_M49.csv"

downloader::download(
    url = url,
    destfile = base::paste0(here::here(), 
            "/data/unsd/m49_raw.csv")
)


## create R object ###############
m49_raw <- 
  readr::read_delim(
    file = base::paste0(here::here(), 
    "/data/unsd/m49_raw.csv"),
    delim = ";"
  )


## save as .rds file ################
pb_save_data_file(
  "unsd", 
  m49_raw, 
  "m49_raw.rds")



```

<center>(*For this R code chunk is no output available*)</center>

::::
:::::

## Inspect M49 Data {#sec-inspect-m49-raw}

To get an detailed understanding of the data structures I will provide the following two outputs of the raw-data:

1. A summary statistics with `skimr::skim()` followed by inspection of the first data rows with `dplyr::glimpse()`.
2. Several detailed outputs of the classifications categories (regions) and their elements (countries) in different code chunks (tabs).

To facilitate the second task I have prepared the function `pb_class_scheme()` and stored in "R./helper.r".

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-inspect-m49-raw}
: Inspect raw data of the UNSD M49 geoscheme classification
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: inspect-m49-clean
#| results: hold

m49_raw <- base::readRDS("data/unsd/m49_raw.rds")
glue::glue("******************* Using skimr::skim() ***************************")
skimr::skim(m49_raw)
glue::glue("")
glue::glue("****************** Using dplyr::glimpse() *************************")
dplyr::glimpse(m49_raw)

```

::::
:::::

The file has 15 columns as you can also see online from the [Overview
page](https://unstats.un.org/unsd/methodology/m49/overview/). 

The many missing values (`NAs`) for the categories `r glossary("LDC")`, `r glossary("LLDC")` and `r glossary("SIDS")` are easy explained: These three columns are coded with an 'x' if the country of this row belong to this category. Recoding these three columns with 1 and 0 (1 = yes, belongs to this category, 0 = no, does not belong to this category) will reduce most of their missing values.

One missing value in the regional categories (Region, Sub-Region and Intermediate Region) is related to Antarctica which is not seen by the M49 scheme as a separated region. It has therefore no regional codes and names with the exception of the overall comprising global region. But it has M49 as well ISO-alpha codes.

One of the missing values for ISO-alpha2 and ISO-alpha3 is related to Sark, which is "recognized by the United Nations Statistics Division (UNSD) as a separate territory" but was not accepted by ISO now for more than 20 years [@mccarthy-2020]. Recently a new application (see [PDF](https://www.sarkid.org/assets/pdf/SarkID%20Identity%20info%20v1_2.pdf)) will change that but currently Sark is still waiting for [ISO 3166 codes](https://www.iso.org/iso-3166-country-codes.html).

The other missing value for ISO-alpha2 codes belongs to Namibia because its abbreviation `NA` is interpreted by R as a missing value!

## Clean Data (first step) {#sec-clean-data-1}

### Procedure

:::::{.my-procedure}
:::{.my-procedure-header}
:::::: {#prp-clean-m49-1}
: Clean M49 data of the UNSD geoscheme classification (first step)
::::::
:::
::::{.my-procedure-container}
1. Remove the global codes and global names because they a redundant: All rows have global code "001" ("World").
2. Shorten long names to their abbreviation ("LCD", "LLCD" and "SIDS").
3. Remove row "Antarctica" because it is not seen as separate country.
4. Replace `NA` in the column ISO-alpha2 Code" of Namibia with the string "NA".
5. Recode the columns `r glossary("LDC")`, `r glossary("LLDC")` and `r glossary("SIDS")` with 0 and 1.
6. Relocate  columns `ISO-alpha3 CODE` and `Country or Area` to the first two columns because these two columns are always relevant for the later groupings and joining with groupings from other sources.
7. Sort the data alphabetically by `Country or Area`.
::::
:::::

### Result (first step) {#sec-display-result-1}

#### Data Structure

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-m49-1}
: Clean UNSD M49 geoscheme classification data (first step)
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: clean-m49-1
#| results: hold

## column renaming vector ########
m49_cols = c(
  LDC = "Least Developed Countries (LDC)", 
  LLDC = "Land Locked Developing Countries (LLDC)", 
  SIDS = "Small Island Developing States (SIDS)"
  )


## clean data ###############################
m49_clean <- base::readRDS("data/unsd/m49_raw.rds") |> 
  dplyr::select(-(1:2)) |> # (1)
  dplyr::rename(tidyselect::all_of(m49_cols)) |> # (2) 
  dplyr::filter(`Country or Area` != "Antarctica") |> # (3)
  dplyr::mutate(`ISO-alpha2 Code` = 
      base::ifelse(`Country or Area` == "Namibia", "NA", `ISO-alpha2 Code`)) |> # (4)
  dplyr::relocate(
      ## any_of() does not understand object names (??)
      tidyselect::any_of(c("ISO-alpha3 Code", "Country or Area")), .before = `Region Code`) |> # (5)
  # .x = anonymous function; "x" = value in cols of m40_clean
  dplyr::mutate(dplyr::across(
    LDC:SIDS, ~ dplyr::if_else(.x == "x", "1", "999", "0") 
    )) |> # (6)
  dplyr::arrange(`Country or Area`) # (7)

## save new tibble ##########
pb_save_data_file(
  "unsd",
  m49_clean,
  "m49_clean.rds"
)

## display results ##########
m49_clean <- base::readRDS("data/unsd/m49_clean.rds")
glue::glue("******************* Using skimr::skim() ***************************")
skimr::skim(m49_clean)
glue::glue("")
glue::glue("****************** Using dplyr::glimpse() *************************")
dplyr::glimpse(m49_clean)

```

***

As  explained above, only Sark has no value for `ISO-alpha2 Code` and `ISO-alpha3 Code` .
::::
:::::


#### Regional Groups

As we can see from @cnj-clean-m49-1 the M49 classification of the United Nations knows three different regional groups (in addition to the overall region `World`.)

::: {.my-code-collection}
:::: {.my-code-collection-header}
::::: {.my-code-collection-icon}
:::::
:::::: {#exm-show-regional-groups}
: Display different regional groups
::::::

::::

::::{.my-code-collection-container}

::: {.panel-tabset}

###### Region

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-show-region-group}
: Show Regions of the UNSD M49 Geoscheme
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: show-m49-region


(
    m49_region <-  pb_class_scheme(
            df = base::readRDS("data/unsd/m49_clean.rds"),
            sel1 = rlang::quo(`Country or Area`),
            sel2 = rlang::quo(`Region Name`)
        )
)

```

***

"Region" is a classification scheme with **`r sum(m49_region$x$data$N)`
countries in `r length(m49_region$x$data$N)` regions**.

::::
:::::

###### Sub-region

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-show-sub-regional-groups}
: Show Sub-regions of the UNSD M49 Geoscheme
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: show-m49-sub-region



(
    m49_sub_region <- pb_class_scheme(
            df <-  base::readRDS("data/unsd/m49_clean.rds"),
            sel1 = rlang::quo(`Country or Area`),
            sel2 = rlang::quo(`Sub-region Name`)
        )
)
```

***


"Sub-region" is a classification scheme with **`r sum(m49_sub_region$x$data$N)`
countries in `r length(m49_sub_region$x$data$N)` regions**.

::::
:::::

###### Intermediate

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-show-intermediate-regional-groups}
: : Show Intermediate Regions of the UNSD M49 Geoscheme
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: show-m49-intermediate-region

  
(
    m49_intermediate_region <- pb_class_scheme(
                df = base::readRDS("data/unsd/m49_clean.rds"),
                sel1 = rlang::quo(`Country or Area`),
                sel2 = rlang::quo(`Intermediate Region Name`)
            )
)
```

***

"Intermediate Region" is a classification scheme with **`r sum(m49_intermediate_region$x$data$N)`
countries in `r length(m49_intermediate_region$x$data$N)` regions**.



::::
:::::

:::

::::
:::::


## Clean Data (second step) {#sec-clean-data-2}


The intermediate grouping does not result into the expected 22 (with Antarctica: 23) different regions as is mentioned in many documents. See for instance the [Article on Wikipedia about the UN geoscheme](https://en.wikipedia.org/wiki/United_Nations_geoscheme) which features a [colored world map](https://en.wikipedia.org/wiki/United_Nations_geoscheme#/media/File:United_Nations_geographical_subregions.png) and a list of countries grouped into the 22 different regions.

![M49 Geoscheme developed and maintained by the United Nations Statistics Divisions (UNSD). (<a href="http://creativecommons.org/licenses/by-sa/3.0/" title="Creative Commons Attribution-Share Alike 3.0">CC BY-SA 3.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=497598">Wikimedia Commons</a>)](img/chap01_UN_geographical_subregions.png){#fig-chap01_UN_geographical_subregions
fig-alt="22 geographical sub-regions as defined by the UNSD are shown with different colors. Antarctica is not shown." fig-align="center" 
width="100%"}

The solution is that we have the `NA`s in `Intermediate Region Name` to replace with the values of the sub-regions. Additionally --- as can be seen in @cnj-show-intermediate-regional-groups --- there is a second small problem: Three small countries are listed as an extra group "Channel Islands". To get the official intermediate grouping we need to get rid of this group and sort all three of them into the category of 
"Northern Europe".

### Procedure

:::::{.my-procedure}
:::{.my-procedure-header}
:::::: {#prp-cnj-clean-m49-2}
: Clean M49 data of the UNSD geoscheme classification (second step)
::::::
:::
::::{.my-procedure-container}
1. Copy the values of `Intermediate Region Name` into a new column `Intermediate Region 2` but replace the `NA`s with values from the `Sub-region Name` column.
2. Replace the "Channel Islands" values in `Intermediate Region 2` with the value of "Northern Europe".
3. Relocate the new `Intermediate Region 2` column after the `Intermediate Region Name` column.

::::
:::::

### Result (second step) {#sec-display-result-2}

#### Data Structure

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-m49-2}
: Clean UNSD M49 geoscheme classification data (second step)
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: clean-m49-2


m49_clean2 <- base::readRDS("data/unsd/m49_clean.rds") |> 
## replace `NA`s of intermediate regions with sub-region values ######
  dplyr::mutate(`Intermediate Region 2` = 
         base::ifelse(is.na(`Intermediate Region Name`), 
                      `Sub-region Name`, `Intermediate Region Name`)
  ) |> # (1)
## replace ""Channel Islands" with "North Europe" ######
    dplyr::mutate(`Intermediate Region 2` = 
         base::ifelse(`Intermediate Region 2` == "Channel Islands", 
                      "Northern Europe", `Intermediate Region 2`)
  ) |> # (2)
    dplyr::relocate(`Intermediate Region 2`, .after = `Intermediate Region Name`) # (3)



## save new tibble as clean2 ##########
pb_save_data_file("unsd", m49_clean2, "m49_clean2.rds")


## display results ##########
m49_clean2 <- base::readRDS("data/unsd/m49_clean2.rds")
glue::glue("******************* Using skimr::skim() ***************************")
skimr::skim(m49_clean2)
glue::glue("")
glue::glue("****************** Using dplyr::glimpse() *************************")
dplyr::glimpse(m49_clean2)




```

::::
:::::


#### Intermediate Region 2

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-show-intermediate-region-2}
: Show correct intermediate region for the UNSD M49 Geoscheme
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: show-intermediate-region-2

## show new intermediate result ###############
(
    m49_intermediate2 <- pb_class_scheme(
            df = base::readRDS("data/unsd/m49_clean2.rds"),
            sel1 = rlang::quo(`Country or Area`),
            sel2 = rlang::quo(`Intermediate Region 2`)
            )
) 
  
```

***

The new regional group `Intermediate Region 2` is a classification scheme with **`r sum(m49_intermediate2$x$data$N)` countries in `r length(m49_intermediate2$x$data$N)` regions**. As Antarctica is not included the grouping with `Intermediate Region 2` represents the correct M49 classification.

::::
:::::
